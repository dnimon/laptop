#!/bin/sh

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_file() {
  local file="$1"
  local text="$2"

  if [ "$file" = "$HOME/.zshrc" ]; then
    if [ -w "$HOME/.zshrc.local" ]; then
      file="$HOME/.zshrc.local"
    else
      file="$HOME/.zshrc"
    fi
  fi

  if ! grep -qs "^$text$" "$file"; then
    printf "\n%s\n" "$text" >> "$file"
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

# shellcheck disable=SC2016
append_to_file "$HOME/.zshrc" 'export PATH="$HOME/.bin:$PATH"'

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      fancy_echo "Upgrading %s ..." "$1"
      brew upgrade "$@"
    else
      fancy_echo "Already using the latest version of %s. Skipping ..." "$1"
    fi
  else
    fancy_echo "Installing %s ..." "$1"
    brew install "$@"
  fi
}

brew_is_installed() {
  brew list -1 | grep -Fqx "$1"
}

brew_is_upgradable() {
  ! brew outdated --quiet "$1" >/dev/null
}

brew_tap_is_installed() {
  brew tap | grep -Fqx "$1"
}

brew_tap() {
  if ! brew_tap_is_installed "$1"; then
    fancy_echo "Tapping $1..."
    brew tap "$1" 2> /dev/null
  fi
}

gem_install_or_update() {
  if gem list "$1" | grep "^$1 ("; then
    fancy_echo "Updating %s ..." "$1"
    sudo gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    sudo gem install "$@"
  fi
}

brew_cask_expand_alias() {
  brew cask info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_cask_is_installed() {
  local NAME
  NAME=$(brew_cask_expand_alias "$1")
  brew cask list -1 | grep -Fqx "$NAME"
}

app_is_installed() {
  local app_name
  app_name=$(echo "$1" | cut -d'-' -f1)
  find /Applications -iname "$app_name*" -maxdepth 1 | egrep '.*' > /dev/null
}

brew_cask_install() {
  if app_is_installed "$1" || brew_cask_is_installed "$1"; then
    fancy_echo "$1 is already installed. Skipping..."
  else
    fancy_echo "Installing $1..."
    brew cask install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_file "$HOME/.zshrc" 'export PATH="/usr/local/bin:$PATH"'
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update

fancy_echo "Verifying the Homebrew installation..."
if brew doctor; then
  fancy_echo "Your Homebrew installation is good to go."
else
  fancy_echo "Your Homebrew installation reported some errors or warnings."
  echo "Review the Homebrew messages to see if any action is needed."
fi

brew_install_or_upgrade 'git'

append_to_file "$HOME/.gemrc" 'gem: --no-document'

if ! command -v rbenv >/dev/null; then
  if ! command -v rvm >/dev/null; then
    fancy_echo 'Installing RVM and the latest Ruby...'
    curl -L https://get.rvm.io | bash -s stable --ruby --auto-dotfiles --autolibs=enable
    . ~/.rvm/scripts/rvm
  else
    local_version="$(rvm -v 2> /dev/null | awk '$2 != ""{print $2}')"
    latest_version="$(curl -s https://raw.githubusercontent.com/wayneeseguin/rvm/stable/VERSION)"
    if [ "$local_version" != "$latest_version" ]; then
      fancy_echo 'Upgrading RVM...'
      rvm get stable --auto-dotfiles --autolibs=enable --with-gems="bundler"
    else
      fancy_echo "Already using the latest version of RVM. Skipping..."
    fi
  fi
fi

fancy_echo 'Updating Rubygems...'
sudo gem update --system

gem_install_or_update 'sinatra'
gem_install_or_update 'sinatra-contrib'
gem_install_or_update 'cert'
gem_install_or_update 'spaceship'
gem_install_or_update 'open4'

brew_install_or_upgrade 'python3'
/usr/local/share/python/easy_install pip
pip install tornado
pip install icons

#brew_install_or_upgrade 'heroku-toolbelt'

brew_tap 'caskroom/cask'
brew_install_or_upgrade 'brew-cask'
brew_tap 'caskroom/versions'

brew_cask_install 'atom'
brew_cask_install 'xamarin'
brew_cask_install 'xamarin-mdk'
brew_cask_install 'xamarin-studio'
brew_cask_install 'xamarin-ios'

if [ -f "$HOME/.laptop.local" ]; then
  . "$HOME/.laptop.local"
fi

append_to_file "$HOME/.rvmrc" 'rvm_auto_reload_flag=2'
append_to_file "$HOME/.rvm/gemsets/global.gems" 'bundler'

brew_install_or_upgrade 'wget'
fancy_echo "Done with everything but Xcode. Sit back and watch the show..."
wget 'http://adcdownload.apple.com/Developer_Tools/Xcode_7.2/Xcode_7.2.dmg'
fancy_echo "Done installing Xcode."

fancy_echo 'Done with package installing'

fancy_echo "Opening Xcode so you can enter credentials and confirm TOS"
open /Applications/Xcode.app

read -p "Press Y once done with Xcode. " -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    exit 1
fi

fancy_echo "Generating ssh key. You will need to manually insert this key into the server git user. Run cat ~/.ssh/id_rsa.pub to see it."
ssh-keygen -t rsa -C "server"

read -p "Press Y once done with inserting ssh key. " -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    exit 1
fi


cd ~/
git clone git@git.mentortek.com:dnimon/meteorMaker.git
git clone git@git.mentortek.com:dnimon/startup-scripts.git
fancy_echo "Git repo should be available now."

cd ~/startup-scripts
chmod 755 macSetup.sh
./macSetup.sh
fancy_echo "startup scripts enabled. Services should now be running."

fancy_echo "All done!"


